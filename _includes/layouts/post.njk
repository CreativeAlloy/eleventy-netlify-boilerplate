---
layout: layouts/base.njk
section: post
---

<article>
  <h1>{{ title }}</h1>
  <p>
    <small>
      <time datetime="{{ page.date | machineDate }}">{{ page.date | readableDate }}</time> by <a href="/authors/{{ author | slug }}/">{{ author }}</a>
    </small>
  </p>

  {{ layoutContent | safe }}

  {% if tags %}
    <p>
    {% for tag in tags %}
      {%- if tag != "post" -%}
        {% set tagUrl %}/tags/{{ tag }}/{% endset %}
        <a href="{{ tagUrl | url }}" rel="tag">{{ tag }}</a>
      {%- endif -%}
    {% endfor %}
    </p>
  {% endif %}

  {# --- NEW: Add the HTML element for the view counter here --- #}
  {# This is a good spot, right after the tags and before the "News Index" link #}
  <small>
    <p id="view-count">Loading witnesses...</p>
  </small>

</article>

<nav>
  <a href="{{ '/news/' | url }}">‚Üê News Index</a>
</nav>

{# --- NEW: The JavaScript goes at the very end of the file --- #}
{# This is the best practice for performance, as it lets the page load first #}
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const viewCountElement = document.getElementById('view-count');
    const pagePath = window.location.pathname;

    // Create a unique key for this article in Local Storage
    const storageKey = `viewed-${pagePath}`;

    // Check if this user has already viewed this page
    const hasViewed = localStorage.getItem(storageKey);

    // Determine which action our function should take
    const action = hasViewed ? 'get' : 'increment';
    
    // Call our Netlify function with the correct action
    fetch(`/.netlify/functions/get-and-increment-views?path=${pagePath}&action=${action}`)
      .then(response => response.json())
      .then(data => {
        if (viewCountElement && data.count) {
          const formattedCount = data.count.toLocaleString('en-US');
          
          if (data.count === 1) {
            viewCountElement.textContent = `${formattedCount} eye has witnessed`;
          } else {
            viewCountElement.textContent = `${formattedCount} eyes have witnessed`;
          }

          // If this was a new view, mark it as viewed in Local Storage
          if (!hasViewed) {
            localStorage.setItem(storageKey, 'true');
          }
        }
      })
      .catch(error => {
        console.error('Error fetching view count:', error);
        if (viewCountElement) {
          viewCountElement.style.display = 'none';
        }
      });
  });
</script>